// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Benutzer
model User {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  username      String
  passwordHash  String  @map("password_hash")
  emailVerified Boolean @default(false) @map("email_verified")
  totpKey       Bytes?  @map("totp_key")
  recoveryCode  Bytes   @map("recovery_code")

  // Beziehungen
  sessions           Session[]
  emailVerifications EmailVerificationRequest[]
  passwordResets     PasswordResetSession[]
  quizAttempts       QuizAttempt[]
  createdQuizzes     Quiz[]                     @relation("QuizCreator")
  hostedLobbies      Lobby[]                    @relation("LobbyHost")

  @@index([email], name: "email_index")
  @@map("user")
}

// Sitzungen
model Session {
  id                String   @id @default(uuid())
  userId            Int      @map("user_id")
  expiresAt         DateTime @map("expires_at")
  twoFactorVerified Boolean  @default(false) @map("two_factor_verified")

  user User @relation(fields: [userId], references: [id])

  @@map("session")
}

// E-Mail-Verifizierung
model EmailVerificationRequest {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  email     String
  code      String
  expiresAt DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id])

  @@map("email_verification_request")
}

// Passwort-Zur√ºcksetzen
model PasswordResetSession {
  id                String   @id @default(uuid())
  userId            Int      @map("user_id")
  email             String
  code              String
  expiresAt         DateTime @map("expires_at")
  emailVerified     Boolean  @default(false) @map("email_verified")
  twoFactorVerified Boolean  @default(false) @map("two_factor_verified")

  user User @relation(fields: [userId], references: [id])

  @@map("password_reset_session")
}

// Quiz
model Quiz {
  id          String   @id @default(uuid())
  title       String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   Int      @map("creator_id")

  creator      User          @relation("QuizCreator", fields: [creatorId], references: [id])
  questions    Question[]
  quizAttempts QuizAttempt[]
  lobbies      Lobby[]

  @@map("quiz")
}

// Fragen
model Question {
  id          String       @id @default(uuid())
  text        String
  explanation String?
  points      Int          @default(1)
  type        QuestionType @default(MULTIPLE_CHOICE)
  quizId      String       @map("quiz_id")
  orderIndex  Int          @default(0) @map("order_index")

  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     Option[]
  userAnswers UserAnswer[]

  @@map("question")
}

// Antwortoptionen
model Option {
  id         String  @id @default(uuid())
  text       String
  isCorrect  Boolean @default(false) @map("is_correct")
  questionId String  @map("question_id")
  orderIndex Int     @default(0) @map("order_index")

  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("option")
}

// Quiz-Versuche
model QuizAttempt {
  id          String    @id @default(uuid())
  userId      Int       @map("user_id")
  quizId      String    @map("quiz_id")
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")
  score       Int?

  user        User         @relation(fields: [userId], references: [id])
  quiz        Quiz         @relation(fields: [quizId], references: [id])
  userAnswers UserAnswer[]

  @@map("quiz_attempt")
}

// Benutzerantworten
model UserAnswer {
  id            String  @id @default(uuid())
  quizAttemptId String  @map("quiz_attempt_id")
  questionId    String  @map("question_id")
  optionId      String? @map("option_id")
  textAnswer    String? @map("text_answer")

  quizAttempt QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question    Question    @relation(fields: [questionId], references: [id])
  option      Option?     @relation(fields: [optionId], references: [id])

  @@map("user_answer")
}

// Fragentyp-Enum
enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  TEXT
}

// Lobby-Status
enum LobbyStatus {
  WAITING
  STARTED
  FINISHED
}

// Lobby
model Lobby {
  id         String      @id @default(uuid())
  hostId     Int         @map("host_id")
  quizId     String?     @map("quiz_id")
  maxPlayers Int         @map("max_players")
  status     LobbyStatus @default(WAITING)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  host         User               @relation("LobbyHost", fields: [hostId], references: [id])
  quiz         Quiz?              @relation(fields: [quizId], references: [id])
  participants LobbyParticipant[]

  @@map("lobby")
}

// Lobby-Teilnehmer
model LobbyParticipant {
  id       String   @id @default(uuid())
  lobbyId  String   @map("lobby_id")
  userId   Int?     @map("user_id")
  nickname String?
  joinedAt DateTime @default(now()) @map("joined_at")

  lobby Lobby @relation(fields: [lobbyId], references: [id])

  @@map("lobby_participant")
}
