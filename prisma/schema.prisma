generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String              @id @default(cuid())
  name                   String?
  email                  String              @unique
  emailVerified          DateTime?
  password               String? // Passwort-Hash für Authentifizierung
  image                  String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  // Wichtig: Das ist die Lucia Auth-Verbindung
  sessions               Session[]
  // Rest deiner bisherigen Felder und Relationen
  roles                  UserRole[]
  playerProfile          PlayerProfile?
  gameSessions           GameSession[]
  achievements           PlayerAchievement[]
  inventoryItems         PlayerInventory[]
  sentFriendRequests     Friend[]            @relation("Requester")
  receivedFriendRequests Friend[]            @relation("Recipient")
  leaderboardEntries     LeaderboardEntry[]
  userActivities         UserActivity[]
}

// Wichtig: Session-Modell für Lucia Auth
model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Role {
  id    String     @id @default(cuid())
  name  String     @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model PlayerProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  nickname      String
  level         Int       @default(1)
  experience    Int       @default(0)
  totalPlayTime Int       @default(0)
  lastLogin     DateTime?
  avatarUrl     String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id           String        @id @default(cuid())
  title        String        @unique
  description  String
  version      String
  releaseDate  DateTime
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  gameSessions GameSession[]
  gameItems    GameItem[]
  achievements Achievement[]
  leaderboards Leaderboard[]
}

model GameSession {
  id         String    @id @default(cuid())
  userId     String
  gameId     String
  startTime  DateTime  @default(now())
  endTime    DateTime?
  duration   Int?
  score      Int?
  completed  Boolean   @default(false)
  ipAddress  String?
  deviceInfo String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  game       Game      @relation(fields: [gameId], references: [id])
}

model Achievement {
  id             String              @id @default(cuid())
  gameId         String
  title          String
  description    String
  iconUrl        String?
  pointValue     Int                 @default(0)
  isSecret       Boolean             @default(false)
  unlockCriteria String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  game           Game                @relation(fields: [gameId], references: [id])
  players        PlayerAchievement[]
}

model PlayerAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

model GameItem {
  id              String            @id @default(cuid())
  gameId          String
  name            String
  description     String
  type            String
  rarity          String
  iconUrl         String?
  price           Float?
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  game            Game              @relation(fields: [gameId], references: [id])
  playerInventory PlayerInventory[]
}

model PlayerInventory {
  id         String   @id @default(cuid())
  userId     String
  gameItemId String
  quantity   Int      @default(1)
  acquired   DateTime @default(now())
  isEquipped Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameItem   GameItem @relation(fields: [gameItemId], references: [id])

  @@unique([userId, gameItemId])
}

model Friend {
  id          String   @id @default(cuid())
  requesterId String
  recipientId String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([requesterId, recipientId])
}

model Leaderboard {
  id             String             @id @default(cuid())
  gameId         String
  name           String
  description    String?
  type           String
  resetFrequency String?
  lastReset      DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  game           Game               @relation(fields: [gameId], references: [id])
  entries        LeaderboardEntry[]
}

model LeaderboardEntry {
  id            String      @id @default(cuid())
  leaderboardId String
  userId        String
  score         Int
  rank          Int?
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([leaderboardId, userId])
  @@index([leaderboardId, score])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, action])
  @@index([createdAt])
}
